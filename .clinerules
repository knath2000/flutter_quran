# Project Intelligence: Quran Adventures

This file captures key learnings, patterns, preferences, and project intelligence discovered during development.

## UI/UX Patterns

*   **Bookmark Indication:**
    *   Initial attempts using shimmer border effects (via `shimmer` package and `CustomPainter` with `SweepGradient`) proved difficult to implement correctly and visually satisfactory (e.g., clipping issues).
    *   **Preferred Approach:** Use conditional styling directly within the `VerseTile` widget. Apply a brighter background color (`Color.lerp` with white), brighter text colors, `TextStyle.shadows` for text glow, and wrap the `Card` in a `DecoratedBox` with `BoxShadow` for container glow when `isBookmarked` is true. This provides a clear luminosity effect and is more straightforward to implement and maintain.
*   **User Feedback:** For actions like bookmarking, provide immediate feedback using both a `SnackBar` for visual confirmation and `HapticFeedback` for tactile confirmation.

## Technical Patterns & Libraries

*   **Auto-Scrolling Lists:**
    *   For scrolling to specific items in a list (like the currently playing verse), the `scrollable_positioned_list` package is highly effective and recommended over manual `ScrollController` offset calculations or `Scrollable.ensureVisible` with `GlobalKey`s.
    *   **Implementation:**
        *   Use `ScrollablePositionedList.builder`.
        *   Initialize and provide `ItemScrollController` and `ItemPositionsListener`.
        *   Listen (`ref.listen`) to the state provider that indicates the target item (e.g., `audioPlaybackStateProvider`).
        *   When the state changes, calculate the correct target `index` for the list (remembering to account for any non-item widgets like headers/intro cards).
        *   Call `itemScrollController.scrollTo()` with the target `index`, desired `duration`, `curve`, and `alignment`.
    *   **State Property:** Ensure the correct property is accessed from the state object to get the item identifier (e.g., `playingVerseId.verseNumber` was correct, not `verseNumberInSurah`).

## Tool Usage Notes

*   **`apply_diff` Reliability:** Be cautious with `apply_diff`. If it fails or gives conflicting success/failure messages, always use `read_file` immediately before retrying the diff to ensure the search pattern matches the current file content exactly. Silent failures can occur.
## AI Integration Patterns

*   **API Key Management:** Use `flutter_dotenv` to load API keys (like `GEMINI_API_KEY`) from a `.env` file. Ensure `.env` is in `.gitignore` and declared as an asset in `pubspec.yaml`. Load dotenv early in `main.dart`.
*   **Service Layer:** Encapsulate API calls within a dedicated service class (e.g., `AiTranslationService`). Initialize the API client (`GenerativeModel`) within the service. Provide a Riverpod `Provider` for the service.
*   **State Management (Async Family):** For features requiring on-demand fetching based on specific parameters (like fetching a translation for a specific verse), use `AsyncNotifierProvider.family`.
    *   Define a simple class or record (with `==` and `hashCode` overrides) for the family argument (e.g., `VerseIdentifier`).
    *   Implement the `build` method to return an initial non-loading state (e.g., empty string or default value). Do *not* trigger the fetch in `build`.
    *   Create a separate method within the `AsyncNotifier` (e.g., `fetchTranslation()`) to handle the actual data fetching. Call this method explicitly when needed (e.g., when the UI element is triggered).
    *   Use `AsyncValue.guard` within the fetch method to automatically handle loading states and capture errors.
    *   Include checks within the fetch method (`if (state.isLoading || _fetchAttempted || state.hasError) return;`) to prevent redundant fetches if the method is called multiple times rapidly for the same instance.
*   **UI Trigger:** Use `GestureDetector` for swipe actions (`onHorizontalDragEnd`). Check the primary velocity to determine swipe direction.
*   **UI Display (Modal):** Use `showModalBottomSheet` to display fetched AI content. Use `DraggableScrollableSheet` inside for flexible height. Trigger the `AsyncNotifierProvider.family`'s fetch method *before* showing the sheet (e.g., using `Future.microtask` or directly before the `showModalBottomSheet` call). Use a `Consumer` inside the sheet's builder to watch the specific provider instance and display loading/data/error states.